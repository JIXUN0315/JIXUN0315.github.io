// <auto-generated />
using System;
using Hatsukoi.Repository.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Hatsukoi.Repository.Migrations
{
    [DbContext(typeof(HatsukoiContext))]
    [Migration("20230314104353_online")]
    partial class online
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Administrator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("管理員Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("管理員名稱");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("管理員的使用者ID");

                    b.HasKey("Id");

                    b.ToTable("Administrator", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.ApplyImg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("申請賣家要附五張照片，存這些照片的Id的表");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("照片的網址");

                    b.Property<int>("ReviewerId")
                        .HasColumnType("int")
                        .HasComment("哪一次申請的Id");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.ToTable("ApplyImg", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("購物車Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("產品編號");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("產品數量");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasComment("賣家Id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("使用者Id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SellerId");

                    b.HasIndex("UserId");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("產品大分類的Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("產品大分類的名稱");

                    b.Property<DateTime>("EditLastTime")
                        .HasColumnType("datetime")
                        .HasComment("資料最後更改時間");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("最後更改資料的");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Chatroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("聊天訊息ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("新增訊息時間");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("訊息內容");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int")
                        .HasComment("誰收到訊息");

                    b.Property<int>("SenderId")
                        .HasColumnType("int")
                        .HasComment("誰傳送訊息");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chatroom", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("優惠券的Id ( 由賣家發行的優惠券種類表 )");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("使用說明 ( 使用條件 )");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("優惠券建立時間");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(5, 2)")
                        .HasComment("折扣數");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime")
                        .HasComment("優惠券最後使用時間");

                    b.Property<string>("PromoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("自訂的優惠碼");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasComment("優惠券由哪個賣家發行");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime")
                        .HasComment("優惠券開始使用時間");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.ToTable("Coupon", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.CouponList", b =>
                {
                    b.Property<int>("CouponId")
                        .HasColumnType("int")
                        .HasComment("票券的Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("票券得到日期");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("票券狀態 ( 1:還不能使用 2:超過使用期限 3:可使用 4:已被使用 )");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("票券的擁有者");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("CouponList", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Credit", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasComment("信用卡清單的Id");

                    b.Property<string>("CreditNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasComment("信用卡卡號");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("信用卡持有者的使用者Id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Credit", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.FavProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("喜好商品的Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("product的id");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime")
                        .HasComment("加入清單時間");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("user的ID");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("FavProduct", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.FavShop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("喜好商家的Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasComment("seller的Id");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime")
                        .HasComment("加入清單時間");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("user的ID");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.HasIndex("UserId");

                    b.ToTable("FavShop", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("通知訊息的編號");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("KindOfNotifi")
                        .HasColumnType("int")
                        .HasComment("訊息的種類是哪一種(0:訂單通知)(1:帳號通知)");

                    b.Property<string>("LinkTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("連結的網址(訊息內的button按鈕)");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("datetime")
                        .HasComment("通知發送時間");

                    b.Property<int>("SendTo")
                        .HasColumnType("int")
                        .HasComment("誰接收訊息(來自UserId)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("訊息內文(手風琴拉開後的顯示)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("訊息標題(手風琴未拉開的顯示)");

                    b.HasKey("Id");

                    b.HasIndex("SendTo");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("訂單編號");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CouponId")
                        .HasColumnType("int")
                        .HasComment("優惠券的Id，如果沒使用則為0");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("訂單下單時間");

                    b.Property<int?>("Evaluate")
                        .HasColumnType("int")
                        .HasComment("訂單評價，(評分範圍可為1~5)");

                    b.Property<DateTime?>("EvaluateDate")
                        .HasColumnType("date")
                        .HasComment("訂單評價的時間");

                    b.Property<string>("EvaluateText")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("訂單評價的留言文字");

                    b.Property<string>("GreenPayId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("綠界Id");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("備註欄 當買家取消or退貨時 不為null");

                    b.Property<DateTime?>("PayTime")
                        .HasColumnType("datetime")
                        .HasComment("訂單付款完成時間");

                    b.Property<int?>("Payment")
                        .HasColumnType("int")
                        .HasComment("付款方式 ( 1:轉帳、2:信用卡 )");

                    b.Property<string>("RecipientAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("收件地址");

                    b.Property<string>("RecipientCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("收件人的城市");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("收件人姓名");

                    b.Property<string>("RecipientPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("收件人電話");

                    b.Property<string>("RecipientPostCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("收件人的郵遞區號");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasComment("賣家Id ( 因為不能合併結帳，所以一張單只會有一個賣家 )");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("訂單狀態( 1:尚未付款 2:處理中(買家已付款，賣家未出貨) 3:帶收貨 4:已完成 5:已取消(三天內沒付款，或是買家自行取消) 6:退貨申請中 7:已退貨)");

                    b.Property<DateTime?>("StatusDealTime")
                        .HasColumnType("datetime")
                        .HasComment("訂單進入處理鐘的時間");

                    b.Property<DateTime?>("StatusFinishTime")
                        .HasColumnType("datetime")
                        .HasComment("訂單完成時間");

                    b.Property<DateTime?>("StatusSendTime")
                        .HasColumnType("datetime")
                        .HasComment("賣家計出貨物的時間");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 0)")
                        .HasComment("訂單最終結帳金額");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("哪個帳號下訂單的");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("訂單明細編號");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstSepcItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("第一規格選項名稱(紀錄)");

                    b.Property<string>("FirstSpecification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("第一規格標題名稱(紀錄)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasComment("訂單標號");

                    b.Property<string>("ProductImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商品圖片");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商品名稱(紀錄)");

                    b.Property<int>("ProductSpecificationId")
                        .HasColumnType("int")
                        .HasComment("商品規格Id ( 一個明細只能記錄一種商品，規格不同也算不同商品 )");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("商品個數數量");

                    b.Property<string>("SecondSepcItem")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("第二規格選項名稱(紀錄)");

                    b.Property<string>("SecondSpecification")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("第二規格標題名稱(紀錄)");

                    b.Property<string>("SellerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("店家名稱(紀錄)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 0)")
                        .HasComment("商品單數原價(紀錄)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductSpecificationId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("產品編號");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商品的描述");

                    b.Property<string>("Editor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商品介紹，用富文本編輯器轉HTML來儲存");

                    b.Property<string>("MadeCountry")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商品產地");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 0)")
                        .HasComment("產品價格");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("產品名稱");

                    b.Property<int>("ProductStatus")
                        .HasColumnType("int")
                        .HasComment("1:正常供應 2:售罄 3:停產");

                    b.Property<int>("SellerId")
                        .HasColumnType("int")
                        .HasComment("誰賣這個商品");

                    b.Property<int>("SubCategory")
                        .HasColumnType("int")
                        .HasComment("產品小分類Id(產品只會連到小分類，小分類才會連到大分類)");

                    b.Property<int?>("ViewTimes")
                        .HasColumnType("int")
                        .HasComment("總瀏覽數");

                    b.HasKey("Id");

                    b.HasIndex("SellerId");

                    b.HasIndex("SubCategory");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.ProductImg", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("商品圖片Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Img")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("圖片本身(網址)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("這個圖片屬於哪個商品");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("商品排序順位(同一個商品的照片排序，必須四張)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImg", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.ProductSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("商品規格的Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstSepcItem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商品第一種規格的選項");

                    b.Property<string>("FirstSpecification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商品第一種規格名稱(標題)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("商品的Id");

                    b.Property<string>("SecondSepcItem")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商品第二種規格的選項");

                    b.Property<string>("SecondSpecification")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商品第二種規格名稱(標題)");

                    b.Property<decimal?>("UnitPrice")
                        .HasColumnType("decimal(18, 0)")
                        .HasComment("這個規格如果有與Product價格不同時將會存在這個欄位");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSpecification", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.ProductTag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("商品標籤Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EditLastTime")
                        .HasColumnType("datetime")
                        .HasComment("資料最後更改時間");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("標籤名稱");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("最後更改資料的");

                    b.HasKey("Id");

                    b.ToTable("ProductTag", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.ProductTagList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("商品標籤的清單");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("商品Id");

                    b.Property<int>("ProductTagId")
                        .HasColumnType("int")
                        .HasComment("商品標籤Id");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductTagId");

                    b.ToTable("ProductTagList", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Reviewer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("user成為賣家的審核表 ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("int")
                        .HasComment("審核者Id");

                    b.Property<string>("ApplyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("申請人姓名");

                    b.Property<string>("ApplyPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("申請人手機號碼");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店實際所在位置(縣市)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店負責人的Email");

                    b.Property<string>("FailReason")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("審核失敗時，失敗的原因");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("品牌介紹文字");

                    b.Property<string>("ProductOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商品產地");

                    b.Property<DateTime?>("ReviewTime")
                        .HasColumnType("datetime")
                        .HasComment("何時審核的");

                    b.Property<int>("Reviewstatus")
                        .HasColumnType("int")
                        .HasComment("審核狀態 1:未審核 2:審核失敗 3:審核成功");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("品牌名稱 (設計館名稱)");

                    b.Property<string>("SocialMedia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店的社群媒體網址");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("誰申請的");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviewer", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Seller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("商店Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店登記地址");

                    b.Property<string>("ApplicantEnglishName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店的負責人英文姓名");

                    b.Property<string>("ApplyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店的負責人姓名");

                    b.Property<string>("ApplyPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店的負責人電話");

                    b.Property<string>("BankAccount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("店家收款帳號的銀行帳號");

                    b.Property<string>("BankAccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("店家收款帳號的戶名");

                    b.Property<string>("BankCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("店家收款帳號的銀行代碼");

                    b.Property<string>("BranchCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("店家收款帳號的分行代碼");

                    b.Property<string>("BrandName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("授權經銷品牌: hatsukoi");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店實際所在位置(縣市)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date")
                        .HasComment("商店創建日期");

                    b.Property<int>("Currency")
                        .HasColumnType("int")
                        .HasComment("使用的幣別(1:台幣 2:美金)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店負責人的Email");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店照片icon網址");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店的負責人的身分證字號");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("品牌介紹文字");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店照片logo網址");

                    b.Property<DateTime>("ModifiDate")
                        .HasColumnType("datetime")
                        .HasComment("修改商店資料時間");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店登記地址的郵遞區號");

                    b.Property<string>("ProductOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商品產地");

                    b.Property<string>("SecondEmail")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店負責人的第二Email");

                    b.Property<string>("ShopBannerRect")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("店家的設計館招牌(長方形)");

                    b.Property<string>("ShopBannerSquare")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("店家的設計館招牌(正方形)");

                    b.Property<string>("ShopName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店名稱");

                    b.Property<string>("SocialMedia")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店的社群媒體網址");

                    b.Property<string>("Story")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("商店的故事(介紹)");

                    b.Property<string>("TaxIdNumber")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("統一編號(8碼數字)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("他的買家Id");

                    b.Property<DateTime?>("VacationFirstDay")
                        .HasColumnType("date")
                        .HasComment("在休假模式時，休假的第一天");

                    b.Property<DateTime?>("VacationLastDay")
                        .HasColumnType("date")
                        .HasComment("在休假模式時，休假的最後一天");

                    b.Property<string>("VerificationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("修改財務信箱與收款帳戶時，需輸入驗證碼證明身分。(在成為賣家時會給)");

                    b.HasKey("Id");

                    b.ToTable("Seller", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("商品小分類Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("商品大分類的Id");

                    b.Property<DateTime>("EditLastTime")
                        .HasColumnType("datetime")
                        .HasComment("資料最後更改時間");

                    b.Property<string>("SubCategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("產品小分類的名稱");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("最後更改資料的");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategory", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("使用者ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Account")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("帳號，(因為會有第三方登入，所以設為可為NULL)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date")
                        .HasComment("使用者的生日");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date")
                        .HasComment("使用者加入Hatsukoi日期");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("使用者的信箱(第三方登入的話也會有信箱)");

                    b.Property<bool?>("Gender")
                        .HasColumnType("bit")
                        .HasComment("使用者的性別，0:男,1:女");

                    b.Property<string>("Identifier")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("第三方登入會有一組識別碼，有這個就不會有帳號密碼");

                    b.Property<bool>("IsEmailActivity")
                        .HasColumnType("bit")
                        .HasComment("電子郵件 活動優惠 通知設定");

                    b.Property<bool>("IsEmailCertified")
                        .HasColumnType("bit")
                        .HasComment("信箱是否認證通過(第三方登入也會有信箱，會判定為已驗證)");

                    b.Property<bool>("IsEmailFocus")
                        .HasColumnType("bit")
                        .HasComment("電子郵件關注評價優惠券 通知設定");

                    b.Property<bool>("IsEmailFollow")
                        .HasColumnType("bit")
                        .HasComment("電子郵件 追蹤的商品和設計館 通知設定");

                    b.Property<bool>("IsEmailHatsukoi")
                        .HasColumnType("bit")
                        .HasComment("電子郵件 站內訊息 通知設定");

                    b.Property<bool>("IsEmailMember")
                        .HasColumnType("bit")
                        .HasComment("電子郵件 會員權益 通知設定");

                    b.Property<bool>("IsEmailOrder")
                        .HasColumnType("bit")
                        .HasComment("電子郵件 訂單狀態 通知設定");

                    b.Property<bool>("IsEmailPersonal")
                        .HasColumnType("bit")
                        .HasComment("電子郵件 個人化推薦 通知設定");

                    b.Property<bool>("IsEmailWeek")
                        .HasColumnType("bit")
                        .HasComment("電子郵件 會員雙周報 通知設定");

                    b.Property<DateTime>("LastLoginTime")
                        .HasColumnType("datetime")
                        .HasComment("最後上線時間");

                    b.Property<int>("MemberLevel")
                        .HasColumnType("int")
                        .HasComment("會員等級，0:品藍,1:白銀,2:黃金,3:鑽石,4:尊爵");

                    b.Property<DateTime>("ModifiDate")
                        .HasColumnType("datetime")
                        .HasComment("修改使用者資料時間");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User姓名");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("密碼，(因為會有第三方登入，所以設為可為NULL)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("使用者電話");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("使用者的頭貼");

                    b.Property<int>("StoreStatus")
                        .HasColumnType("int")
                        .HasComment("店家狀態,0:沒申請,1:審核中,2:駁回,3:通過,4:停權");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.ViewTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("觀看次數記錄的Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasComment("被觀看的商品Id");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime")
                        .HasComment("瀏覽的時間");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasComment("誰觀看這個商品");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("ViewTime", (string)null);
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.ApplyImg", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Reviewer", "Reviewer")
                        .WithMany("ApplyImgs")
                        .HasForeignKey("ReviewerId")
                        .IsRequired()
                        .HasConstraintName("FK_ApplyImg_Reviewer");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Cart", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_Product");

                    b.HasOne("Hatsukoi.Repository.EntityModel.Seller", "Seller")
                        .WithMany("Carts")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_Seller");

                    b.HasOne("Hatsukoi.Repository.EntityModel.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Cart_User");

                    b.Navigation("Product");

                    b.Navigation("Seller");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Chatroom", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.User", "Receiver")
                        .WithMany("ChatroomReceivers")
                        .HasForeignKey("ReceiverId")
                        .IsRequired()
                        .HasConstraintName("FK_Chatroom_User1");

                    b.HasOne("Hatsukoi.Repository.EntityModel.User", "Sender")
                        .WithMany("ChatroomSenders")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("FK_Chatroom_User");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Coupon", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Seller", "Seller")
                        .WithMany("Coupons")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_Coupon_Seller");

                    b.Navigation("Seller");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.CouponList", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Coupon", "Coupon")
                        .WithMany()
                        .HasForeignKey("CouponId")
                        .IsRequired()
                        .HasConstraintName("FK_CouponList_Coupon");

                    b.HasOne("Hatsukoi.Repository.EntityModel.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CouponList_User");

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Credit", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.User", "User")
                        .WithMany("Credits")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Credit_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.FavProduct", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Product", "Product")
                        .WithMany("FavProducts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_FavProduct_Product");

                    b.HasOne("Hatsukoi.Repository.EntityModel.User", "User")
                        .WithMany("FavProducts")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_FavProduct_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.FavShop", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Seller", "Seller")
                        .WithMany("FavShops")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_FavShop_Seller");

                    b.HasOne("Hatsukoi.Repository.EntityModel.User", "User")
                        .WithMany("FavShops")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_FavShop_User");

                    b.Navigation("Seller");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Notification", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.User", "SendToNavigation")
                        .WithMany("Notifications")
                        .HasForeignKey("SendTo")
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User1");

                    b.Navigation("SendToNavigation");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Order", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Seller", "Seller")
                        .WithMany("Orders")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_Seller");

                    b.HasOne("Hatsukoi.Repository.EntityModel.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Order_User");

                    b.Navigation("Seller");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.OrderDetail", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Order");

                    b.HasOne("Hatsukoi.Repository.EntityModel.ProductSpecification", "ProductSpecification")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductSpecificationId")
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_ProductSpecification");

                    b.Navigation("Order");

                    b.Navigation("ProductSpecification");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Product", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Seller", "Seller")
                        .WithMany("Products")
                        .HasForeignKey("SellerId")
                        .IsRequired()
                        .HasConstraintName("FK_Product_Seller");

                    b.HasOne("Hatsukoi.Repository.EntityModel.SubCategory", "SubCategoryNavigation")
                        .WithMany("Products")
                        .HasForeignKey("SubCategory")
                        .IsRequired()
                        .HasConstraintName("FK_Product_SubCategory");

                    b.Navigation("Seller");

                    b.Navigation("SubCategoryNavigation");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.ProductImg", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Product", "Product")
                        .WithMany("ProductImgs")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductImg_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.ProductSpecification", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Product", "Product")
                        .WithMany("ProductSpecifications")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductSpecification_Product");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.ProductTagList", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Product", "Product")
                        .WithMany("ProductTagLists")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductTagList_Product");

                    b.HasOne("Hatsukoi.Repository.EntityModel.ProductTag", "ProductTag")
                        .WithMany("ProductTagLists")
                        .HasForeignKey("ProductTagId")
                        .IsRequired()
                        .HasConstraintName("FK_ProductTagList_ProductTag");

                    b.Navigation("Product");

                    b.Navigation("ProductTag");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Reviewer", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Administrator", "Administrator")
                        .WithMany("Reviewers")
                        .HasForeignKey("AdministratorId")
                        .HasConstraintName("FK_Reviewer_Administrator");

                    b.HasOne("Hatsukoi.Repository.EntityModel.User", "User")
                        .WithMany("Reviewers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Reviewer_User");

                    b.Navigation("Administrator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.SubCategory", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Category", "Category")
                        .WithMany("SubCategories")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_SubCategory_Category");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.ViewTime", b =>
                {
                    b.HasOne("Hatsukoi.Repository.EntityModel.Product", "Product")
                        .WithMany("ViewTimesNavigation")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("FK_ViewTime_Product");

                    b.HasOne("Hatsukoi.Repository.EntityModel.User", "User")
                        .WithMany("ViewTimes")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_ViewTime_User");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Administrator", b =>
                {
                    b.Navigation("Reviewers");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Category", b =>
                {
                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("FavProducts");

                    b.Navigation("ProductImgs");

                    b.Navigation("ProductSpecifications");

                    b.Navigation("ProductTagLists");

                    b.Navigation("ViewTimesNavigation");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.ProductSpecification", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.ProductTag", b =>
                {
                    b.Navigation("ProductTagLists");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Reviewer", b =>
                {
                    b.Navigation("ApplyImgs");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.Seller", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Coupons");

                    b.Navigation("FavShops");

                    b.Navigation("Orders");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.SubCategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Hatsukoi.Repository.EntityModel.User", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("ChatroomReceivers");

                    b.Navigation("ChatroomSenders");

                    b.Navigation("Credits");

                    b.Navigation("FavProducts");

                    b.Navigation("FavShops");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Reviewers");

                    b.Navigation("ViewTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
